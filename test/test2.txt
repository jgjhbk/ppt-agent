---
title: Python编程学习指南
author: 李老师
date: 2025年9月20日
keywords: Python, 编程, 函数, 数据结构, 面向对象
---

# 一、课程概述

## 1.1 课程目标
1. 掌握基础语法与逻辑控制
2. 熟练使用列表、字典等数据结构
3. 理解函数与面向对象编程
4. 能够处理文件与异常
5. 学会数据处理与可视化基础

## 1.2 核心内容
1. 基础语法
2. 数据结构
3. 函数编程
4. 文件操作
5. 实战应用

# 二、Python基础语法

## 2.1 环境搭建
- 推荐安装Anaconda
- 使用VS Code或Jupyter Notebook

## 2.2 变量与数据类型

（1）变量声明示例
```name = "Alice"      # 字符串
age = 25            # 整数
height = 1.75       # 浮点数
is_student = True   # 布尔值

print(type(name))   # <class 'str'>```
## 2.3 控制结构
（1）条件判断
```x = 15
if x > 10:
    print("大于10")
else:
    print("小于等于10")```

（2）循环结构
1）for循环
```for fruit in ["apple", "banana"]:
    print(fruit)```
2）while循环
```count = 0
while count < 3:
    print(count)
    count += 1```
# 三、数据结构

## 3.1 列表(List)
列表基本操作
```numbers = [1, 3, 5]```

1）访问与修改
```print(numbers[0])   # 1
numbers[1] = 10     # 修改元素```

2）添加与删除
```numbers.append(7)   # [1, 10, 5, 7]
numbers.remove(5)   # [1, 10, 7]```

3）切片操作
```print(numbers[0:2]) # [1, 10]```

## 3.2 字典(Dictionary)

字典操作示例
```person = {
    "name": "Bob",
    "age": 30,
    "city": "Beijing"
}```

1）访问与修改
```print(person["name"]) # Bob
person["age"] = 31    # 更新年龄```

2）添加新键值对
```person["job"] = "Engineer"```
# 四、函数与模块

## 4.1 函数定义
函数创建与调用
```def add(a, b):
    return a + b```

调用函数
```result = add(3, 5)
print(result) # 8```

## 4.2 模块导入
模块使用示例
```import math```

使用模块函数
```print(math.sqrt(16)) # 4.0```
# 五、文件操作

## 5.1 读写文件
文件IO操作

写入文件
```with open("test.txt", "w") as f:
    f.write("Hello, Python!")```

读取文件
```with open("test.txt", "r") as f:
    content = f.read()
    print(content)```
# 六、实战项目

## 6.1 学生成绩管理系统
系统核心功能
```students = []

def add_student(name, score):
    students.append({"name": name, "score": score})
def get_average():
    total = sum(s["score"] for s in students)
    return total / len(students)```

使用示例
```add_student("Alice", 85)
add_student("Bob", 90)
print(f"平均分: {get_average()}")```
